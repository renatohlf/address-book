{"version":3,"sources":["../../../src/routes/users/routes.js"],"names":["User","app","controller","routes","users","bcrypt","services","verifytoken","authManager","verifyToken","get","req","res","getUsers","status","send","message","post","name","body","email","password","hash","hashedPassword","createUser","result","created","put","id","params","userId","updateUser","delete","deleteUser","module","exports"],"mappings":"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","file":"routes.js","sourcesContent":["function User(app) {\n\tconst controller = app.routes.users.controller;\n\tconst bcrypt = app.services.bcrypt;\n\tconst verifytoken = app.services.authManager.verifyToken;\n\n\tapp.get('/api/users', verifytoken, async function (req, res) {\n\t\ttry {\n\t\t\tlet users = await controller.getUsers();\n\t\t\tres.status(200).send({ users: users });\n\t\t} catch (err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\n\t});\n\n\tapp.post('/api/users', async function (req, res) {\n\t\tconst name = req.body.name;\n\t\tconst email = req.body.email;\n\t\tconst password = req.body.password;\n\n\t\tlet hashedPassword = await bcrypt.hash(password, 8);\n\n\t\ttry {\n\t\t\t\n\t\t\tconst result = await controller.createUser(name, email, hashedPassword);\n\t\t\tlet created = result[1];\n\t\t\tif (created) {\n\t\t\t\tres.status(200).send('User created');\n\t\t\t} else {\n\t\t\t\tres.status(400).send('User already exists');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\n\t});\n\n\tapp.put('/api/users/:userId', verifytoken, async function (req, res) {\n\t\tconst name = req.body.name;\n\t\tconst email = req.body.email;\n\t\tconst id = req.params.userId;\n\t\t\n\t\ttry {\n\t\t\tconst result = await controller.updateUser(id, name, email);\n\t\t\tif (result) {\n\t\t\t\tres.status(200).send('User updated');\n\t\t\t} else {\n\t\t\t\tres.status(400).send('User can not be updated');\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\n\t});\n\n\tapp.delete('/api/users/:userId', verifytoken, async function (req,res) {\n\t\tconst id = req.params.userId;\n\t\ttry {\n\t\t\t//TODO: Find user first, after try to delete.\n\t\t\tconst result = await controller.deleteUser(id);\n\t\t\tif(result) {\n\t\t\t\tres.status(200).send('User deleted');\n\t\t\t} else {\n\t\t\t\tres.status(400).send('No user deleted');\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\t});\n\n}\n\nmodule.exports = User;\n\n"]}