{"version":3,"sources":["../../../src/routes/contacts/routes.js"],"names":["contact","app","controller","routes","contacts","verifytoken","services","authManager","verifyToken","get","req","res","getContacts","status","send","message","post","first_name","body","last_name","email","phone","createContact","result","created","put","id","params","contactId","updateContact","delete","deleteContact","module","exports"],"mappings":"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","file":"routes.js","sourcesContent":["function contact(app) {\n\tconst controller = app.routes.contacts.controller;\n\tconst verifytoken = app.services.authManager.verifyToken;\n\n\tapp.get('/api/contacts', verifytoken, async function (req, res) {\n\t\ttry {\n\t\t\tconst contacts = await controller.getContacts();\n\t\t\tres.status(200).send({ contacts: contacts });\n\t\t} catch (err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\t});\n\n\tapp.post('/api/contacts', verifytoken, async function (req, res) { \n\t\tconst first_name = req.body.first_name;\n\t\tconst last_name = req.body.last_name;\n\t\tconst email = req.body.email;\n\t\tconst phone = req.body.phone;\n\n\t\ttry {\n\t\t\tconst result = await controller.createContact(first_name, last_name, email, phone);\n\t\t\tlet created = result[1];\n\t\t\tif (created) {\n\t\t\t\tres.status(200).send('Contact created');\n\t\t\t} else {\n\t\t\t\tres.status(409).send('Contact already exists');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\t});\n\n\tapp.put('/api/contacts/:contactId', verifytoken, async function (req, res) {\n\t\tconst first_name = req.body.first_name;\n\t\tconst last_name = req.body.last_name;\n\t\tconst email = req.body.email;\n\t\tconst phone = req.body.phone;\n\t\tconst id = req.params.contactId;\n\t\t\n\t\ttry {\n\t\t\tconst result = await controller.updateContact(id, first_name, last_name, email, phone);\n\t\t\tif (result) {\n\t\t\t\tres.status(200).send('Contact updated');\n\t\t\t} else {\n\t\t\t\tres.status(400).send('Contact can not be updated');\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\n\t});\n\n\tapp.delete('/api/contacts/:contactId', verifytoken, async function (req,res) {\n\t\tconst id = req.params.contactId;\n\t\ttry {\n\t\t\t//TODO: Find contact first, after try to delete.\n\t\t\tconst result = await controller.deleteContact(id);\n\t\t\tif(result) {\n\t\t\t\tres.status(200).send('Contact deleted');\n\t\t\t} else {\n\t\t\t\tres.status(400).send('No contact deleted');\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send(err.message);\n\t\t}\n\t});\n\t\n}\n\nmodule.exports = contact;\n\n"]}